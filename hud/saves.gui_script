local function update_slot(self, slot)
	local filename = sys.get_save_file(APPID, "slot" .. slot.idx)
	local data = sys.load(filename)

	if data and data.flows then
		gui.set_enabled(slot.empty, false)
		gui.set_enabled(slot.title, true)
		gui.set_enabled(slot.info, true)

		gui.set_enabled(slot.button_disabled, false)
		gui.set_enabled(slot.delete, true)

		gui.set_text(slot.button_text, "Load")
		local t = data.flows["__default"].paragraphs[1].text
		if t:len() > 43 then
			t = t:sub(1, 43) .. "..."
		end
		gui.set_text(slot.title, t)
		gui.set_text(slot.info, data.time)
		
		table.insert(self.buttons, {node = slot.button_bg, action = "load", slot = slot})
		table.insert(self.buttons, {node = slot.delete_bg, action = "delete", slot = slot})
		
	else
		gui.set_enabled(slot.empty, true)
		gui.set_enabled(slot.title, false)
		gui.set_enabled(slot.info, false)

		gui.set_enabled(slot.delete, false)
		gui.set_enabled(slot.button_disabled, not self.can_save)
		if self.can_save then
			table.insert(self.buttons, {node = slot.button_bg, action = "save", slot = slot})
		end

		gui.set_text(slot.button_text, "Save")
		gui.set_text(slot.button_disabled_text, "Save")
	end	
end

function init(self)
	self.can_save = false
	gui.set_render_order(6)
	self.slots = {}
	self.buttons = {}
	self.color = gui.get_color(gui.get_node("button_bg"))
	self.color_active = gui.get_color(gui.get_node("button"))

	for i = 1, 8 do 
		local item = gui.clone_tree(gui.get_node("slot"))
		gui.set_position(item.slot, vmath.vector3(950, 1000 - 100 * i, 0))
		gui.set_parent(item.slot, gui.get_node("box"), true)
		gui.set_text(item.count, i)
		item.idx = i
		update_slot(self, item)
		table.insert(self.slots, item)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update") then
		gui.cancel_animation(gui.get_node("box"), "color")
		gui.set_color(gui.get_node("box"), vmath.vector4(1,1,1,1))
		self.buttons = {}
		self.can_save = message.can_save
		for _, slot in ipairs(self.slots) do
			update_slot(self, slot)
		end
	end
end

local function restore_hover(self)
	if self.hover then
		gui.animate(self.hover, "color", self.color, gui.EASING_LINEAR, 0.2)
		self.hover = nil
	end
end

function on_input(self, action_id, action)
	if action_id == nil then
		for _, button in ipairs(self.buttons) do
			if gui.pick_node(button.node, action.x, action.y) then
				if self.hover ~= button.node then
					restore_hover(self)
					self.hover = button.node
					gui.animate(button.node, "color", self.color_active, gui.EASING_LINEAR, 0.2)
				end
				return
			end
		end
		restore_hover(self)

	elseif action_id == hash("touch") and action.pressed then
		for _, button in ipairs(self.buttons) do
			if gui.pick_node(button.node, action.x, action.y) then
				if button.action == "save" then
					sound.play("/sound#button")
					msg.post("#ink", "save", {appid = APPID, fname = "slot" .. button.slot.idx})
					update_slot(self, button.slot)
					msg.post("#hud", "continue")
					gui.animate(gui.get_node("box"), "color.w", 0, gui.EASING_LINEAR, 0.25)
					return
				elseif button.action == "delete" then
					sound.play("/sound#button")
					local filename = sys.get_save_file(APPID, "slot" .. button.slot.idx)
					sys.save(filename, {})
					self.buttons = {}
					for _, slot in ipairs(self.slots) do
						update_slot(self, slot)
					end
					return
				elseif button.action == "load" then
					sound.play("/sound#button")
					gui.animate(gui.get_node("box"), "color.w", 0, gui.EASING_LINEAR, 0.5)
					msg.post("#hud", "restore", {appid = APPID, fname = "slot" .. button.slot.idx})
					self.buttons = {}
					return
				end
			end
		end
	end
end
